@startuml

package Mapbender <<Frame>> {

  package QueryBuild <<Frame>>{
   package Entity <<Frame>> {
      class Query <extends Entity>{
        # id:int
        # name:String
        __ Doctrine ORM __
        # conditions:QueryCondition[]
        # user:User
        # styleMap:StyleMap
        __ SQL __
        # connectionName:String
        # schemaName:Array
        # tableName:String
        __

        -- Alternative --
        # sql:String
        # where:String
        __ Export __
        + toSQL()
      }

      class QueryCondition <extends Entity>{
        # id:int
        # fieldName:string
        # operator:string
        # value:string
        # sql:string
        __
        + toSQL()
      }

      class StyleMap <extends Entity>{
        # id:int
        # test:int
        __ Doctrine ORM __
        + selectStyle: Style
        + defaultStyle: Style
        ---
        + toJson():String
        + fromJson(String json):void
      }

      class Style <extends Entity>{
        # id:int
        --
        + borderSize:int
        + borderColor:string
        + borderAlpha:int
        + backgroundSize:int
        + backgroundColor:string
        + backgroundAlpha:int
        ---
        + toJson():string
        + fromJson(json)
      }


      class Configuration<extends Entity> {
        # id:int
        # connection: name
        __ Permissions __
        # allowRowSql: bool
        # allowSave: bool
        # allowRemove: bool
        # allowExport: bool
        # userOwnQueries: bool
        __ Defaults __
        # defaultConnection = "default" :String
      }

    }
    package Component <<Frame>>{
      
      class StyleManager <extends DataSource> {
        + save(StyleMap styleMap):StyleMap
        + remove(int id):bool
      }
      
      class QueryManager<extends FeatureType>{
          __ Configuration Management __
          + getConfig() :  Configuration
          + setConfig(Configuration config)
          __ User Management __
          + getUser():User
          + setUser(User user)
          __ User Queries __
          + getById(int id): Query
          + save(Query: query) : Query
          + list():Query[]
          + remove(int queryId):bool
      }
    }

    package Element <<Frame>>{
      class QueryBuilder <extends Element>{
         # getCurrentUser():User
         __ Configuration Management __
         # getConfig() :  Configuration
         # setConfig(Configuration config)
         __ API __
         + getQueries(int userId):Query[]
         + saveQuery(Query query):Query
         + removeQuery(int id):bool
         + executeQuery(int queryId): GeoJSON
         + export(int queryId, formatType:string): mixed
      }
    }

    note top of QueryManager
    Set <User> is necessary,
    to getting work with
    this Manager
    end note


    note top of Configuration
    <b>User queries element configuration</b>
    -- Edit --
    # allowEdit - Enable edit functionality.
        Impacts on frontend interface
    # allowRowSql - Enable edit row SQL
    # allowConditions - Enable set fields conditions,
        which be used to generate SQL where condition
    -- Setup --
    # <u>connection</u> - Connection name
    end note

    note top of QueryCondition
        "sql" is defined for inteli sense
        auto complete
    end note

    note top of StyleMap
        Feature state style definitions
    end note

    Configuration "1" <--- "1" QueryBuilder
    Configuration "1" <--- "1" QueryManager
    QueryBuilder "1" ---> "1" QueryManager
    QueryManager "1" ---> "1" StyleManager
    QueryCondition "*" <--- "1" Query
    StyleManager ---> StyleMap
    QueryBuilder "1" ---> "*" Query
    StyleMap "1" <--- "1" Query
    StyleMap "1" ---> "2" Style
  }
}
@enduml
